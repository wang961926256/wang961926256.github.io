<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wangqj-blog</title>
    <link>http://balaramadurai.github.io/</link>
    <description>Recent content on wangqj-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jun 2016 13:07:31 +0200</lastBuildDate>
    <atom:link href="http://balaramadurai.github.io/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>http://balaramadurai.github.io/program/</link>
      <pubDate>Wed, 07 Jun 2017 15:36:00 +0530</pubDate>
      
      <guid>http://balaramadurai.github.io/program/</guid>
      <description>May the Force be with you, the Torque about you This is where my great about goes</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://balaramadurai.github.io/reading/</link>
      <pubDate>Wed, 07 Jun 2017 15:36:00 +0530</pubDate>
      
      <guid>http://balaramadurai.github.io/reading/</guid>
      <description>You may contact me through the nearest wormhole This is where my great contact goes</description>
    </item>
    
    <item>
      <title>Posts</title>
      <link>http://balaramadurai.github.io/post/</link>
      <pubDate>Tue, 28 Jun 2016 13:07:31 +0200</pubDate>
      
      <guid>http://balaramadurai.github.io/post/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://balaramadurai.github.io/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://balaramadurai.github.io/interview/</guid>
      <description>1.Java集合对象 java中集合类都是由Collection和Map接口派生出来的,其中Set和List接口是Collection接口派生出来的子接口，他们分别代表了无序集合和有序集合，Map接口的所有实现类用于保存具有映射关系的数据（关联数组）。 ArrayList：实现了长度可变的数组，在内存中分配连续空间；遍历元素和随机访问元素的效率比较高，线程不安全。初始容量10，负载因子0.5，扩容增量0.5倍。 LinkedList：采用链表存储方式；插入、删除元素时效率比较高，线程不安全。 Vector：通过数组实现的，它支持线程的同步，访问比ArrayList慢，线程安全。初始容量10，负载因子1，扩容增量1倍。 HashSet：线程不安全，存取速度快。 HashMap：轻量级，线程不安全，效率较高，允许出现null。初始容量16，负载因子0.75，扩容增量1倍。 1.8之后底层红黑树实现 HashTable：重量级，线程安全，效率较低，不允许出现null。 ConcurrentHashMap：线程安全，分段加锁ReentrantLock（重入锁）
2.通过Class类获取Class对象的方法 1）通过Object类的getClass()方法 Person p = new Person(); Class c = p.getClass();
2） 通过 类名.class 获取到字节码文件对象（任意数据类型都具备一个class静态属性,看上去要比第一种方式简单）。 Class c2 = Person.class;
3）通过Class类中的方法（将类名作为字符串传递给Class类中的静态方法forName即可） Class c3 = Class.forName(&amp;ldquo;Person&amp;rdquo;);
3.抽象类和接口 相同点： （1）都不能被实例化
（2）接口的实现类或抽象类的子类都只有实现了接口或抽象类中的方法后才能实例化。
不同点： （1）接口只有定义，不能有方法的实现，java 1.8中可以定义default方法体，而抽象类可以有定义与实现，方法可在抽象类中实现。
（2）实现接口的关键字为implements，继承抽象类的关键字为extends。一个类可以实现多个接口，但一个类只能继承一个抽象类。所以，使用接口可以间接地实现多重继承。
（3）接口强调特定功能的实现，而抽象类强调所属关系。
（4）接口成员变量默认为public static final，必须赋初值，不能被修改；其所有的成员方法都是public、abstract的。抽象类中成员变量默认default，可在子类中被重新定义，也可被重新赋值；抽象方法被abstract修饰，不能被private、static、synchronized和native等修饰，必须以分号结尾，不带花括号。
（5）接口被用于常用的功能，便于日后维护和添加删除，而抽象类更倾向于充当公共类的角色，不适用于日后重新对立面的代码修改。功能需要累积时用抽象类，不需要累积时用接口。
4.面向对象三大特征 继承：代码复用、传递性。子类继承父类的特征和行为。子类可以有父类的方法，属性（非private）。子类也可以对父类进行扩展，也可以重写父类的方法。缺点就是提高代码之间的耦合度。 super：通过super实现对父类成员的访问。用来引用当前对象的父类。通过super显示的调用父类的有参构造，无参构造可以隐式调用； this：用来引用当前对象，指向自己； final：可以修饰类，方法，属性；修饰的类不能继承，修饰的方法不能重写，修饰的属性不能修改； 封装：隐藏内部实现，只暴露公共行为；把一堆数据属性与方法数据放在一个容器中，这个容器就是对象。让对象可以通过 &amp;ldquo;.&amp;rdquo; 来调用对象中的数据属性与方法属性。 类:封装的是对象的属性和行为； 方法:封装一段特定的业务逻辑功能； 访问控制修饰符:封装的是具体的访问权限 多态：指的是同一个方法调用，由于对象不同可能会有不同的行为。现实生活中，同一个方法，具体实现会完全不同。 对象多态(所有对象)体现： 向上造型：向上转型是自动的 Father f = new Children(); 不需要强转 向下造型：向下转型需要强转 Children c = (Children)new Father() 需要强转。让父类知道具体转成哪个子类</description>
    </item>
    
    <item>
      <title>Blogs</title>
      <link>http://balaramadurai.github.io/blog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://balaramadurai.github.io/blog/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Programs</title>
      <link>http://balaramadurai.github.io/program/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://balaramadurai.github.io/program/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Readings</title>
      <link>http://balaramadurai.github.io/reading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://balaramadurai.github.io/reading/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
